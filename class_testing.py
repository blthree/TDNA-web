from load_genes import read_json_compressed, save_json_compressed
from classes import gene
from pyfaidx import Fasta
import os

APP_ROOT = os.path.dirname(os.path.abspath(__file__))

data = read_json_compressed()
a = data[1]
b = data[2]
name = a['name']
chrom = a['chrom']
start = a['start']
end = a['end']
ori = a['orientation']
exons = a['exons']
test_gene = gene(**a)
tg2 = gene(**b)
fasta_path = os.path.join(APP_ROOT, 'static', 'data', 'AT9.fa')
genome = Fasta(fasta_path)
tg2.get_sequence(genome)
print(name,start,end)
print(tg2.exon_list[0].start)

"""
LOCUS       Example                   24 bp    DNA              UNK 01-JAN-1980
DEFINITION  An example GenBank file generated by BioPython
ACCESSION   123456789
VERSION     123456789
KEYWORDS    .
SOURCE      .
  ORGANISM  .
            .
FEATURES             Location/Qualifiers
     misc_feature    4..12
ORIGIN
        1 ggggaaaatt ttaaaacccc aaaa
//
"""

c = "LOCUS       {0}                {1} bp DNA     UNK 01-JAN-1980".format(tg2.name, len(tg2.sequence))
d = "DEFINITION  Genbank file generated by T-DNA toolkit"
e = "ACCESSION   123456789"
f = "VERSION     123456789"
g = "SOURCE      ."
h = "ORGANISM    Arabidopsis thaliana"
i = "FEATURES    Location/Qualifiers"
j = "     misc_feature          {0}..{1}".format(tg2.start, tg2.end)
n = "     CDS       join({0})"
k = "ORIGIN"
#l = "        1 ggggaaaatt ttaaaacccc aaaa"
m = "//"
print(tg2.exon_list[0].loc_tuple)
exon_generator = "\n".join(["     exon      {0}..{1}".format(exon.loc_tuple[0], exon.loc_tuple[1]) for exon in tg2.exon_list])
cds_gen = ",".join(["{0}..{1}".format(exon.loc_tuple[0], exon.loc_tuple[1]) for exon in tg2.exon_list])
cds = n.format(cds_gen)
print(cds)
def split_input(string, chunk_size, end_char=''):
    num_chunks = len(string)//chunk_size
    if (len(string) % chunk_size != 0):
        num_chunks += 1
    output = []
    for i in range(0, num_chunks):
        output.append(string[chunk_size*i:chunk_size*(i+1)]+end_char)
    return output
# begin generator clusterf***
# optional: ONE GENERATOR TO RULE THEM ALL, AND IN THE DARKNESS BIND THEM
"""
final_seq = '\n'.join([[' '*(max(len(n) for n in [str(1+(x*60)) for x in range(len([' '.join(split_input(s, 10)) for s in split_input(tg2.sequence.seq, 60)]))])-len(s)) + s for s in [str(1+(x*60)) for x in range(len([' '.join(split_input(s, 10)) for s in split_input(tg2.sequence.seq, 60)]))]][i] + ' ' + [' '.join(split_input(s, 10)) for s in split_input(tg2.sequence.seq, 60)][i] for i in range(len([' '.join(split_input(s, 10)) for s in split_input(tg2.sequence.seq, 60)]))])
"""
seq = [' '.join(split_input(s, 10)) for s in split_input(tg2.sequence.seq, 60)]
num_seq = [str(1+(x*60)) for x in range(len(seq))]
max_len_num = max(len(n) for n in num_seq)
new_num_seq = [' '*(max_len_num-len(s)) + s for s in num_seq]
new_seq = [new_num_seq[i] + ' ' + seq[i] for i in range(len(seq))]
final_seq = '\n'.join(new_seq)
l = final_seq
n =[c,d,e,f,g,h,i,cds,exon_generator,k,l,m]
o = '\n'.join(n)
print(o)
f2 = open('genbank_test.gb', 'w')
f2.write(o)